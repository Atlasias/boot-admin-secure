server.port=8084
logging.config: classpath:logback-spring.xml
logging.level.de.codecentric.boot.admin.client.registration=debug
#logging.level.com=debug
spring.output.ansi.enabled=always
########################################################################################################################

spring.application.name=BOOT CLIENT TESTER SECURITY

spring.http.encoding.force=true
spring.http.encoding.force-request=true
spring.http.encoding.force-response=true
      
spring.mvc.throw-exception-if-no-handler-found=true
spring.mvc.view.prefix=/jspView/
spring.mvc.view.suffix=.jsp
  
spring.security.user.name=ADMIN
spring.security.user.password=1234

########################################################################################################################

##Enables the Spring Boot Admin Client.
spring.boot.admin.client.enabled=true
##Comma separated ordered list of URLs of the Spring Boot Admin server to register at. This triggers the AutoConfiguration. Mandatory.
##Http-path of registration endpoint at your admin server.
spring.boot.admin.client.url=http://localhost:8081

#Username and password in case the SBA Server api is protected with HTTP Basic authentication.
spring.boot.admin.client.username=${spring.security.user.name}
spring.boot.admin.client.password=${spring.security.user.password}

#Name to register with.
#${spring.application.name} if set "spring-boot-application" otherwise.
spring.boot.admin.client.instance.name=${spring.application.name}

##Metadata key-value-pairs to be associated with this instance.
spring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}
spring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}
spring.boot.admin.client.instance.service-url=http://localhost:8084

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS
spring.boot.admin.client.api-path=instances
management.endpoint.metrics.enabled=true
management.endpoint.shutdown.enabled=true

##Username and password in case the SBA Server api is protected with HTTP Basic authentication.
##Interval for repeating the registration (in ms).
#spring.boot.admin.client.period=10000
##Connect timeout for the registration (in ms).
#spring.boot.admin.client.connect-timeout=5000
##Read timeout for the registration (in ms).
#spring.boot.admin.client.read-timeout=5000
##If set to true the periodic task to register the application is automatically scheduled after the application is ready.
#spring.boot.admin.client.auto-registration=true
##Switch to enable auto-deregistration at Spring Boot Admin server when context is closed. If the value is unset the feature is active if a running CloudPlatform was detected.
#spring.boot.admin.client.auto-deregistration=true
##If set to true the client will only register against one admin server (in order defined by spring.boot.admin.instance.url); if that admin server goes down will automatically register against the next admin server. If false will register against all admin servers.
#spring.boot.admin.client.register-once=true
##Health-url to register with. Can be overridden in case the reachable URL is different (e.g. Docker). Must be unique in registry.
##Guessed based on management-url and endpoints.health.id.
#spring.boot.admin.client.instance.health-url=
##Base url for computing the management-url to register with. The path is inferred at runtime and appended to the base url.
##Guessed based on management.port service-url and server.servlet-path.
#spring.boot.admin.client.instance.management-base-url=
##Management-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).
##Guessed based on management-base-url and management.context-path.
#spring.boot.admin.client.instance.management-url=
##Base url for computing the service-url to register with. The path is inferred at runtime and appended to the base url.
##Guessed based on hostname server.port.
#spring.boot.admin.client.instance.service-base-url=
##Service-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).
##Guessed based on service-base-url and server.context-path.
#spring.boot.admin.client.instance.service-url=
##Use the ip-address rather then the hostname in the guessed urls. If server.address / management.address is set it get used. Otherwise the IP address returned from InetAddress.getLocalHost() gets used.
#spring.boot.admin.client.instance.prefer-ip=false